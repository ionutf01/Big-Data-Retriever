@page
@model Birt.App.Pages.DataAnalyzer

<!DOCTYPE html>
<html>
<head>
    <title>SHACL Shapes Visualization - Enhanced</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
        }

        .node {
            stroke: #fff;
            stroke-width: 2px;
            cursor: pointer;
            filter: drop-shadow(0 0 3px rgba(0,0,0,0.3));
        }

        .link {
            stroke: #999;
            stroke-opacity: 0.6;
            stroke-width: 2px;
        }

        .label {
            font-size: 12px;
            pointer-events: none;
            text-anchor: middle;
            text-shadow: 0 0 3px white;
        }

        .node-info {
            position: fixed;
            right: 20px;
            top: 20px;
            background: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            max-width: 300px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .legend {
            position: fixed;
            left: 20px;
            top: 20px;
            background: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .legend-item {
            margin: 5px 0;
            display: flex;
            align-items: center;
        }

        .legend-color {
            width: 20px;
            height: 20px;
            margin-right: 10px;
            border-radius: 50%;
        }

        .controls {
            position: fixed;
            left: 20px;
            bottom: 20px;
            background: white;
            padding: 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            z-index: 1000;
        }

        .search input {
            padding: 10px;
            width: 250px;
            border: 2px solid #ccc;
            border-radius: 5px;
            font-size: 16px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            transition: border-color 0.3s, box-shadow 0.3s;
        }
        
        .search input:focus {
            border-color: #007bff;
            box-shadow: 0 2px 8px rgba(0, 123, 255, 0.25);
            outline: none;
        }

        button {
            margin: 5px;
            padding: 8px 15px;
            border: 1px solid #ccc;
            border-radius: 5px;
            background: white;
            cursor: pointer;
            font-size: 14px;
        }

        button:hover {
            background: #f0f0f0;
        }

        .error-message {
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: #fff;
            padding: 20px;
            border: 2px solid red;
            border-radius: 5px;
            box-shadow: 0 0 10px rgba(0,0,0,0.2);
        }
    </style>
</head>
<body>
    <div class="legend">
        <h3>Legend</h3>
        <div class="legend-item">
            <div class="legend-color" style="background: #ff7f0e"></div>
            <span>NodeShape</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #1f77b4"></div>
            <span>PropertyShape</span>
        </div>
        <div class="legend-item">
            <div class="legend-color" style="background: #2ca02c"></div>
            <span>Constraint</span>
        </div>
        <h4>Link Types</h4>
        <div class="legend-item">
            <svg width="40" height="2"><line x1="0" y1="1" x2="40" y2="1" stroke="#999" stroke-width="2"/></svg>
            <span>has_property</span>
        </div>
        <div class="legend-item">
            <svg width="40" height="2"><line x1="0" y1="1" x2="40" y2="1" stroke="#999" stroke-width="2" stroke-dasharray="5,5"/></svg>
            <span>has_constraint</span>
        </div>
        <div class="legend-item">
            <svg width="40" height="2"><line x1="0" y1="1" x2="40" y2="1" stroke="#999" stroke-width="2" stroke-dasharray="10,10"/></svg>
            <span>extends</span>
        </div>
        <div class="legend-item">
            <svg width="40" height="2">
                <line x1="0" y1="1" x2="40" y2="1" stroke="#999" stroke-width="2" stroke-dasharray="3,3"/>
            </svg>
            <span>exhibited_at</span>
        </div>
        <div class="legend-item">
            <svg width="40" height="2">
                <line x1="0" y1="1" x2="40" y2="1" stroke="#999" stroke-width="2" stroke-dasharray="7,3"/>
            </svg>
            <span>instance_of</span>
        </div>
    </div>

    <div class="node-info">
        <h3>Node Information</h3>
        <div id="info-content">Select a node to see details</div>
        <div class="search">
            <input type="text" placeholder="Search nodes...">
        </div>
    </div>


    <div class="controls">
        <button onclick="resetZoom()">Reset View</button>
        <button onclick="zoomIn()">Zoom In</button>
        <button onclick="zoomOut()">Zoom Out</button>
    </div>

    <div id="visualization"></div>

<script>
try {
    const shaclData = {
        nodes: [
            // NodeShapes
            { id: "ArtistShape", type: "NodeShape", target: "art:Artist" },
            { id: "PainterShape", type: "NodeShape", target: "art:Painter" },
            { id: "InfluenceShape", type: "NodeShape", target: "art:Influence" },
            { id: "TimePeriodShape", type: "NodeShape", target: "art:TimePeriod" },

            // PropertyShapes
            { id: "hasName", type: "PropertyShape", datatype: "xsd:string" },
            { id: "birthDate", type: "PropertyShape", datatype: "xsd:date" },
            { id: "influencedBy", type: "PropertyShape", class: "art:Influence" },
            { id: "hasType", type: "PropertyShape", class: "owl:Class" },

            // Constraints
            { id: "birthDateRange", type: "Constraint", value: "1850-1900" },
            { id: "nameRequired", type: "Constraint", value: "minCount: 1" },
            { id: "validWikidataID", type: "Constraint", value: "pattern: ^Q[0-9]+$" },

            // Events (Artists)
            { id: "AlbertEdelfelt", type: "Event", label: "Albert Edelfelt", value: "Q356644" },
            { id: "AlexanderCalder", type: "Event", label: "Alexander Calder", value: "Q151580" },
            { id: "AndreDerain", type: "Event", label: "André Derain", value: "Q156272" },
            { id: "AntoineBourdelle", type: "Event", label: "Antoine Bourdelle", value: "Q314350" },
            { id: "GeorgesSeurat", type: "Event", label: "Georges Seurat", value: "Q34013" },
            { id: "HenriMatisse", type: "Event", label: "Henri Matisse", value: "Q5589" },
            { id: "PaulCezanne", type: "Event", label: "Paul Cézanne", value: "Q157541" },
            { id: "PaulGauguin", type: "Event", label: "Paul Gauguin", value: "Q37693" },
            { id: "Renoir", type: "Event", label: "Pierre-Auguste Renoir", value: "Q40599" },
            { id: "AugusteRodin", type: "Event", label: "Auguste Rodin", value: "Q159432" },

            // Influences (Exhibitions)
            { id: "VeniceBiennale", type: "Influence", label: "Venice Biennale", value: "Q205751" },
            { id: "ArmoryShow", type: "Influence", label: "Armory Show", value: "Q688909" },
            { id: "FreeSecession", type: "Influence", label: "Free Secession", value: "Q910743" },
            { id: "SwissNationalExhibition", type: "Influence", label: "Swiss National Exhibition", value: "Q1121146" },
            { id: "ExpoInternational1937", type: "Influence", label: "Exposition Internationale 1937", value: "Q1165755" }
        ],
        links: [
            // ArtistShape connections
            { source: "ArtistShape", target: "hasName", type: "has_property" },
            { source: "ArtistShape", target: "birthDate", type: "has_property" },
            { source: "ArtistShape", target: "influencedBy", type: "has_property" },

            // Property constraints
            { source: "birthDate", target: "birthDateRange", type: "has_constraint" },
            { source: "hasName", target: "nameRequired", type: "has_constraint" },

            // PainterShape inheritance
            { source: "PainterShape", target: "ArtistShape", type: "extends" },

            // InfluenceShape connections
            { source: "InfluenceShape", target: "hasName", type: "has_property" },
            { source: "InfluenceShape", target: "hasType", type: "has_property" },

            // Event-Influence connections
            { source: "HenriMatisse", target: "VeniceBiennale", type: "exhibited_at" },
            { source: "HenriMatisse", target: "ArmoryShow", type: "exhibited_at" },
            { source: "AndreDerain", target: "VeniceBiennale", type: "exhibited_at" },
            { source: "AndreDerain", target: "ArmoryShow", type: "exhibited_at" },
            { source: "GeorgesSeurat", target: "VeniceBiennale", type: "exhibited_at" },
            { source: "PaulCezanne", target: "VeniceBiennale", type: "exhibited_at" },
            { source: "PaulGauguin", target: "ArmoryShow", type: "exhibited_at" },
            { source: "Renoir", target: "VeniceBiennale", type: "exhibited_at" },
            { source: "AugusteRodin", target: "ExpoInternational1937", type: "exhibited_at" },

            // Artist connections to ArtistShape
            { source: "AlbertEdelfelt", target: "ArtistShape", type: "instance_of" },
            { source: "AlexanderCalder", target: "ArtistShape", type: "instance_of" },
            { source: "AndreDerain", target: "ArtistShape", type: "instance_of" },
            { source: "AntoineBourdelle", target: "ArtistShape", type: "instance_of" },
            { source: "GeorgesSeurat", target: "ArtistShape", type: "instance_of" },
            { source: "HenriMatisse", target: "ArtistShape", type: "instance_of" },
            { source: "PaulCezanne", target: "ArtistShape", type: "instance_of" },
            { source: "PaulGauguin", target: "ArtistShape", type: "instance_of" },
            { source: "Renoir", target: "ArtistShape", type: "instance_of" },
            { source: "AugusteRodin", target: "ArtistShape", type: "instance_of" }
        ]
    };

    const width = window.innerWidth - 40;
    const height = window.innerHeight - 40;

    const color = d3.scaleOrdinal()
        .domain(["NodeShape", "PropertyShape", "Constraint", "Event", "Influence"])
        .range(["#ff7f0e", "#1f77b4", "#2ca02c", "#e377c2", "#17becf"]);

    // Create SVG with zoom support
    const svg = d3.select("#visualization")
        .append("svg")
        .attr("width", width)
        .attr("height", height);

    const g = svg.append("g");

    const zoom = d3.zoom()
        .scaleExtent([0.1, 4])
        .on("zoom", (event) => {
            g.attr("transform", event.transform);
        });

    svg.call(zoom);

    // Create arrow marker
    g.append("defs").selectAll("marker")
        .data(["end"])
        .enter().append("marker")
        .attr("id", String)
        .attr("viewBox", "0 -5 10 10")
        .attr("refX", 15)
        .attr("refY", 0)
        .attr("markerWidth", 6)
        .attr("markerHeight", 6)
        .attr("orient", "auto")
        .append("path")
        .attr("d", "M0,-5L10,0L0,5");

    // Create force simulation
    const simulation = d3.forceSimulation(shaclData.nodes)
        .force("link", d3.forceLink(shaclData.links).id(d => d.id).distance(150))
        .force("charge", d3.forceManyBody().strength(-300))
        .force("center", d3.forceCenter(width / 2, height / 2))
        .force("collide", d3.forceCollide().radius(50));

    // Create links
    const link = g.append("g")
        .selectAll("line")
        .data(shaclData.links)
        .join("line")
        .attr("class", "link")
        .attr("marker-end", "url(#end)")
        .attr("stroke-dasharray", d => {
            switch(d.type) {
                case "has_constraint": return "5,5";
                case "extends": return "10,10";
                default: return null;
            }
        });

    // Create nodes
    const node = g.append("g")
        .selectAll("circle")
        .data(shaclData.nodes)
        .join("circle")
        .attr("class", "node")
        .attr("r", 10)
        .attr("fill", d => color(d.type))
        .call(d3.drag()
            .on("start", dragstarted)
            .on("drag", dragged)
            .on("end", dragended));

    // Add labels
    const label = g.append("g")
        .selectAll("text")
        .data(shaclData.nodes)
        .join("text")
        .attr("class", "label")
        .attr("dy", ".35em")
        .text(d => d.id);

    // Search functionality
    d3.select(".search input").on("input", function() {
        const term = this.value.toLowerCase();
        node.style("opacity", d => d.id.toLowerCase().includes(term) ? 1 : 0.2);
        label.style("opacity", d => d.id.toLowerCase().includes(term) ? 1 : 0.2);
        link.style("opacity", d => {
            const sourceMatch = d.source.id.toLowerCase().includes(term);
            const targetMatch = d.target.id.toLowerCase().includes(term);
            return sourceMatch || targetMatch ? 1 : 0.2;
        });
    });

    // Enhanced node click handler
    node.on("click", function(event, d) {
        const infoContent = document.getElementById("info-content");
        let content = `
            <div style="border-left: 4px solid ${color(d.type)}; padding-left: 10px">
                <h4 style="margin: 0 0 10px 0">${d.id}</h4>
                <table style="border-collapse: collapse; width: 100%">
                    <tr>
                        <td><strong>Type:</strong></td>
                        <td>${d.type}</td>
                    </tr>
                    ${d.target ? `
                    <tr>
                        <td><strong>Target:</strong></td>
                        <td>${d.target}</td>
                    </tr>` : ''}
                    ${d.datatype ? `
                    <tr>
                        <td><strong>Datatype:</strong></td>
                        <td>${d.datatype}</td>
                    </tr>` : ''}
                    ${d.class ? `
                    <tr>
                        <td><strong>Class:</strong></td>
                        <td>${d.class}</td>
                    </tr>` : ''}
                    ${d.value ? `
                    <tr>
                        <td><strong>Constraint:</strong></td>
                        <td>${d.value}</td>
                    </tr>` : ''}
                </table>
            </div>
        `;
        infoContent.innerHTML = content;
    });

    // Simulation tick handler
    simulation.on("tick", () => {
        link
            .attr("x1", d => d.source.x)
            .attr("y1", d => d.source.y)
            .attr("x2", d => d.target.x)
            .attr("y2", d => d.target.y);

        node
            .attr("cx", d => d.x)
            .attr("cy", d => d.y);

        label
            .attr("x", d => d.x)
            .attr("y", d => d.y);
    });
    link.attr("stroke-dasharray", d => {
        switch(d.type) {
            case "has_constraint": return "5,5";
            case "extends": return "10,10";
            case "exhibited_at": return "3,3";
            case "instance_of": return "7,3";
            default: return null;
        }
    });

    // Zoom functions
    function resetZoom() {
        svg.transition().duration(750).call(zoom.transform, d3.zoomIdentity);
    }

    function zoomIn() {
        svg.transition().duration(750).call(zoom.scaleBy, 1.5);
    }

    function zoomOut() {
        svg.transition().duration(750).call(zoom.scaleBy, 0.67);
    }

    // Drag handlers
    function dragstarted(event) {
        if (!event.active) simulation.alphaTarget(0.3).restart();
        event.subject.fx = event.subject.x;
        event.subject.fy = event.subject.y;
    }

    function dragged(event) {
        event.subject.fx = event.x;
        event.subject.fy = event.y;
    }

    function dragended(event) {
        if (!event.active) simulation.alphaTarget(0);
        event.subject.fx = null;
        event.subject.fy = null;
    }

    // Window resize handler
    window.addEventListener('resize', () => {
        const width = window.innerWidth - 40;
        const height = window.innerHeight - 40;
        svg.attr("width", width).attr("height", height);
        simulation.force("center", d3.forceCenter(width / 2, height / 2)).restart();
    });

    // Update color scale to include new types
    
    
    // Add timestamp and user information
    const footer = d3.select("body")
        .append("div")
        .style("position", "fixed")
        .style("bottom", "20px")
        .style("left", "20px")
        .style("font-size", "12px")
        .style("color", "#666");

    footer.append("p")
        .text("Generated: 2025-02-03 13:39:08 UTC");

    footer.append("p")
        .text("User: ionutf01");

} catch (error) {
    console.error("Visualization error:", error);
    d3.select("#visualization")
        .append("div")
        .attr("class", "error-message")
        .text(`Error loading visualization: ${error.message}`);
}
</script>
</body>
</html>